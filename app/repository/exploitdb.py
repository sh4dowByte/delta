import json
import requests

from app.utils.style import Colors
from rich.tree import Tree

class ExploitDB:
    """
    This class interacts with the ExploitDB API to search for exploits based on a search term.
    It fetches information such as description, date published, author, type, platform, 
    and whether the exploit has been verified.
    """
    
    def __init__(self):
        """
        Initializes the ExploitDB object with a base URL for the API and request headers.
        """
        self.base_url = (
            "https://www.exploit-db.com/?draw=3&columns%5B0%5D%5Bdata%5D=date_published"
            "&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true"
            "&columns%5B0%5D%5Borderable%5D=true&columns%5B1%5D%5Bdata%5D=download"
            "&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false"
            "&columns%5B1%5D%5Borderable%5D=false&columns%5B2%5D%5Bdata%5D=application_md5"
            "&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true"
            "&columns%5B2%5D%5Borderable%5D=false&columns%5B3%5D%5Bdata%5D=verified"
            "&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true"
            "&columns%5B3%5D%5Borderable%5D=false&columns%5B4%5D%5Bdata%5D=description"
            "&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true"
            "&columns%5B4%5D%5Borderable%5D=false&columns%5B5%5D%5Bdata%5D=type_id"
            "&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true"
            "&columns%5B5%5D%5Borderable%5D=false&columns%5B6%5D%5Bdata%5D=platform_id"
            "&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true"
            "&columns%5B6%5D%5Borderable%5D=false&columns%5B7%5D%5Bdata%5D=author_id"
            "&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false"
            "&columns%5B7%5D%5Borderable%5D=false&columns%5B8%5D%5Bdata%5D=code"
            "&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true"
            "&columns%5B8%5D%5Borderable%5D=true&columns%5B9%5D%5Bdata%5D=id"
            "&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false"
            "&columns%5B9%5D%5Borderable%5D=true&order%5B0%5D%5Bcolumn%5D=9"
            "&order%5B0%5D%5Bdir%5D=desc&start=0&length={length}&search%5Bvalue%5D={search}"
            "&search%5Bregex%5D=false&author=&port=&type=&tag=&platform=&_=1726011388390"
        )
        
        self.headers = {
            'accept': 'application/json, text/javascript, */*; q=0.01',
            'accept-language': 'en-US,en;q=0.7',
            'priority': 'u=1, i',
            'referer': 'https://www.exploit-db.com/',
            'sec-ch-ua': '"Chromium";v="128", "Not;A=Brand";v="24", "Brave";v="128"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"macOS"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin',
            'sec-gpc': '1',
            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',
            'x-requested-with': 'XMLHttpRequest'
        }
    
    def search(self, search_term, length=20, title = ''):
        """
        Perform a search on ExploitDB based on the provided search term and the number of results.
        It will print out the results in a tree format, displaying relevant information.
        
        :param search_term: The term to search for exploits.
        :param length: Number of results to retrieve (default is 20).
        :return: Error message if the search fails or no data found.
        """
        tree = Tree(title)

        search_term = search_term.replace('CVE-', '').replace('cve-', '')
        url = self.base_url.format(length=length, search=search_term)
        response = requests.get(url, headers=self.headers)

        if response.status_code == 200:
            datas = response.json()['data']

            for data in datas:
                data_node = tree.add(Colors.text(data['description'][1]))
                data_node.add(f"Date Publised : {data['date_published']}")
                data_node.add(f"Author        : {data['author']['name']}")
                data_node.add(f"Type          : {data['type_id']}")
                data_node.add(f"Platform      : {data['platform_id']}")
                data_node.add(f"Exploit       : {'https://www.exploit-db.com/exploits/'+data['id']}")
                data_node.add(f"Verify        : {"✅" if data['verified'] == 1 else "❌"}")

            if not datas:
                tree.add(f"[yellow]Exploit not detected[/yellow]")

            return tree
        else:
            tree.add(f"Error: [red]{response.status_code}[/red]")